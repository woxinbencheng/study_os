                    操作系统（Operating Systems）

                    第一节

操作系统将硬件抽象成了操作系统的调用：
1，CPU：抽象成了进程
2，硬盘：抽象成了文件
3，内存：抽象成了地址空间

操作系统的内外层次：
1，对内管理：Kernel(内核)
2，对外服务：Shell(外壳)


Kernel要管理的东西：

1，CPU调度             (CPU)
2，物理内存管理        (内存)
3，虚拟内存管理      
4，文件系统管理        (硬盘)
5，中断处理和设备驱动  (外设)


并发和并行：

1，并发：一段时间多个进程一起执行    (一个CPU,时间段处理多个进程)
2，并行：同意时间点多个进程一起执行 （多个CPU，同一时间处理多个进程）



操作系统很复杂:

1, windows xp 4500W 行
2，要求可靠，高效
3，操作系统是安全的基础
4，管理硬件是操作系统的主要工作

操作系统实例:

1，UNIX BSD
2，Linux
3，windows :前身是dos

操作系统分类:

1，实时操作系统:要求响应快
2，分时操作系统:每个程序都被分配同样的时间片，
依赖时钟产生计时中断多，任务多用户。
3，分布式操作系统：通过网络连接，一些任务交给远程的数据中心处理

操作系统结构：

1，紧耦合：所有操作系统功能都在内核中
2，微内核：松耦合，但是牺牲了性能
3，外核：分成面向硬件和面向应用两个部分，
由面向应用的内核访问面向硬件的内核
4，虚拟机:虚拟机层直接访问硬件，操作系统访问虚拟机层

                   第二节

操作系统的启动流程：

Disk：硬盘
BIOS：基本IO处理系统（base IO system ）
Bootloader:引导加载器（加载os）
CS：段寄存器
IP：指令寄存器

未加电时：
Bootloader在硬盘的第一扇区（512 B）
OS在硬盘上
BIOS在内存特定地址

加电后：

1，BIOS已经在内存的特定地址->CS:IP=0xf000:fff0

2,加电自检（POST）：寻找显卡等物理设备（执行物理设备驱动程序），
都在执行BIOS


3，BIOS检查硬件无误，加载Bootloader,将硬盘第一扇区的512B（Bootloader代码）
加载到Bootloader指定起始位置，并指令指针调到这个位置->CS:IP=0x0000:7c00

4，Bootloader的工作是加载操作系统，将操作系统从硬盘（起始位置和长度控制）
，加载到内存

5，指令指针调到操作系统所在内存位置，至此操作系统接管硬件设备。


内存图，如图：

－－－－－－－－－－－－共4GB
－                    －
－                    －
－                    －
－                    －
－ free space         －
－                    －
－                    －
－                    －
－－－－－－－－－－－－
－                    －
－os操作系统          －
－－－－－－－－－－－－
－                    －检查物理设备正常后，找到硬盘第一扇区，512B长度
－（第1步）           －将代码复制进内存起始位置为->0000:7c00
－BIOS ROM            －            （加载Bootloader）
－－－－－－－－－－－－f000:fff0
－                    －
－                    －
－  free space        －
－                    －
－                    －
－－－－－－－－－－－－
－                    －找到os的起始位置和os的代码长度，从硬盘将os
－（第2步)            －加载到内存
－512字节             －
－Bootloader          －
－－－－－－－－－－－－0000:7c00
－                    －
－BIOS DATA           －
－                    －
－－－－－－－－－－－－0000:0000

__________________________________________________________________________

操作系统主要面向的：

1,系统调用：应用程序请求的系统调用(system_call)，同步或异步
  之所以会异步，是因为有可能应用程序的需求资源没有准备好。
2,异常：应用程序所产生的错误操作，如除零操作，同步事件
3,中断：外部设备所产生的信号或（IO），异步事件

中断异常处理机制：

中断：
1，保存被打断的现场
2，中断表：表中有产生中断事件的编号，将中断事件标记，并编号
3，中断服务处理这个中断
4，清除中断标记
5，恢复原现场状态，继续执行原任务

异常：
1，保存异常现场
2，处理异常
   杀死产生异常的程序或重新执行异常指令
3，恢复现场

系统调用API：

1，windows：Win32 API
2，linux等：POSIX API
3，JAVA虚拟机：JAVA API（并非系统调用，封装了系统调用）


内核特点：

1，值得信任
2，权限大，可执行特权指令
3，方便应用程序：将外设等抽象成了系统调用


应用程序状态：

１，用户态：无法执行特权指令，有自己的应用程序堆栈
２，内核态：可以执行特权指令，有自己的内核堆栈


                        第三节
